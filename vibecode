#!/bin/bash

set -e

OS_TYPE="$(uname -s)"
IS_MACOS=false
if [[ "$OS_TYPE" == "Darwin" ]]; then
  IS_MACOS=true
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
IMAGE_NAME="vibecode"
DEFAULT_SESSION_NAME="vibecode-$$"

VOLUMES=""
CLAUDE_ARGS=""
SHOW_HELP=false
SESSION_NAME=""
LIST_SESSIONS=false
PERSISTENT=false

show_help() {
  cat <<EOF
vibecode - Docker-in-Docker Claude Code Wrapper

USAGE:
    vibecode [OPTIONS] [COMMAND...]

OPTIONS:
    --volume SRC:DEST    Mount host directory SRC to container path DEST (optional)
    --session NAME       Use persistent named session (optional)
    --list              List running sessions
    --help, -h          Show this help message

EXAMPLES:
    # Show help
    vibecode --help
    
    # Run Claude Code (current directory mounted by default)
    vibecode claude "what is this project about"
    
    # Check Claude version
    vibecode claude --version
    
    # Interactive shell in container
    vibecode bash
    
    # Mount real project directory (preserving full path)
    vibecode --volume /home/ak/code/some/backend:/home/ak/code/some/backend claude analyze
    
    # Multiple volume mounts
    vibecode --volume .:/current/project --volume ~/data:/home/user/data claude "analyze both directories"
    
    # Use persistent named session
    vibecode --session myproject claude "analyze this project"
    
    # List running sessions
    vibecode --list

YOLO MODE (AI without confirmations - safe in containers):
    # One-time setup (acknowledge permissions)
    vibecode claude --dangerously-skip-permissions
    
    # YOLO mode - let AI make changes freely
    vibecode claude --print "refactor this codebase" --dangerously-skip-permissions --verbose
    
    # YOLO with real project mounting
    vibecode --volume /home/ak/code/some/backend:/home/ak/code/some/backend claude --print "fix all bugs" --dangerously-skip-permissions
    
    # YOLO in persistent session
    vibecode --session danger-zone claude --print "restructure project" --dangerously-skip-permissions

NOTES:
    - Current directory is automatically mounted to its same path if no --volume specified
    - Each invocation creates a new container (unless --session is used)
    - Parallel sessions are supported - run multiple vibecode commands simultaneously
    - Claude Code authentication is inherited from host ~/.claude configuration
    - Containers are automatically cleaned up unless --session is used

MACOS REQUIREMENTS:
    - Docker Desktop for Mac with privileged container support
    - File sharing enabled in Docker Desktop preferences

EOF
}

while [[ $# -gt 0 ]]; do
  case $1 in
  --volume)
    if [[ -z "$2" ]]; then
      echo "Error: --volume requires an argument (SRC:DEST)" >&2
      exit 1
    fi
    if [[ -z "$VOLUMES" ]]; then
      VOLUMES="$2"
    else
      VOLUMES="$VOLUMES|$2"
    fi
    shift 2
    ;;
  --session)
    if [[ -z "$2" ]]; then
      echo "Error: --session requires a name" >&2
      exit 1
    fi
    SESSION_NAME="$2"
    PERSISTENT=true
    shift 2
    ;;
  --list)
    LIST_SESSIONS=true
    shift
    ;;
  --help | -h)
    SHOW_HELP=true
    shift
    ;;
  -*)
    echo "Error: Unknown option $1" >&2
    echo "Use 'vibecode --help' for usage information." >&2
    exit 1
    ;;
  *)
    CLAUDE_ARGS="$*"
    break
    ;;
  esac
done

if [[ "$SHOW_HELP" == true ]]; then
  show_help
  exit 0
fi

if [[ "$LIST_SESSIONS" == true ]]; then
  echo "Running vibecode sessions:"
  docker ps --filter "label=vibecode-session" --format "table {{.Names}}\t{{.Status}}\t{{.CreatedAt}}" 2>/dev/null || echo "No running sessions found"
  exit 0
fi

add_claude_config_volumes() {
  if [[ -d "$HOME/.claude" ]]; then
    if [[ -z "$DOCKER_VOLUMES" ]]; then
      DOCKER_VOLUMES="-v|$HOME/.claude:/home/developer/.claude"
    else
      DOCKER_VOLUMES="$DOCKER_VOLUMES|-v|$HOME/.claude:/home/developer/.claude"
    fi
  fi

  if [[ -f "$HOME/.claude.json" ]]; then
    if [[ -z "$DOCKER_VOLUMES" ]]; then
      DOCKER_VOLUMES="-v|$HOME/.claude.json:/home/developer/.claude.json"
    else
      DOCKER_VOLUMES="$DOCKER_VOLUMES|-v|$HOME/.claude.json:/home/developer/.claude.json"
    fi
  fi
}

if [[ -z "$SESSION_NAME" ]]; then
  SESSION_NAME="$DEFAULT_SESSION_NAME"
fi

CURRENT_DIR="${ORIGINAL_PWD:-$(pwd)}"
if [[ -z "$VOLUMES" ]]; then
  VOLUMES="$CURRENT_DIR:$CURRENT_DIR"
fi
get_absolute_path() {
  local path="$1"
  if [[ "$path" == /* ]]; then
    echo "$path"
  else
    python3 -c "import os; print(os.path.abspath('$path'))" 2>/dev/null || echo "$PWD/$path"
  fi
}

DOCKER_VOLUMES=""
add_claude_config_volumes
IFS='|' read -ra VOLUME_ARRAY <<< "$VOLUMES"
for volume in "${VOLUME_ARRAY[@]}"; do
  if [[ ! "$volume" =~ ^[^:]+:[^:]+$ ]]; then
    echo "Error: Invalid volume format '$volume'. Use SRC:DEST format." >&2
    exit 1
  fi

  src="${volume%%:*}"
  dest="${volume##*:}"

  if [[ "$src" != /* ]]; then
    src="$(get_absolute_path "$src")"
  fi

  if [[ ! -e "$src" ]]; then
    echo "Error: Source path '$src' does not exist" >&2
    exit 1
  fi

  if [[ -z "$DOCKER_VOLUMES" ]]; then
    DOCKER_VOLUMES="-v|$src:$dest"
  else
    DOCKER_VOLUMES="$DOCKER_VOLUMES|-v|$src:$dest"
  fi
done

if ! command -v docker &>/dev/null; then
  echo "Error: Docker is not installed or not in PATH" >&2
  if [[ "$IS_MACOS" == true ]]; then
    echo "On macOS, install Docker Desktop from: https://docs.docker.com/desktop/install/mac/" >&2
  fi
  exit 1
fi

if ! docker info &>/dev/null; then
  echo "Error: Docker daemon is not running" >&2
  if [[ "$IS_MACOS" == true ]]; then
    echo "Start Docker Desktop application" >&2
  else
    echo "Start Docker daemon with: sudo systemctl start docker" >&2
  fi
  exit 1
fi

ensure_image_exists() {
  HOST_UID=$(id -u)
  HOST_GID=$(id -g)
  IMAGE_TAG="${IMAGE_NAME}:${HOST_UID}-${HOST_GID}"

  if ! docker image inspect "$IMAGE_TAG" &>/dev/null; then
    echo "Building vibecode image for user ${HOST_UID}:${HOST_GID}..."
    cd "$SCRIPT_DIR"
    docker build --build-arg USER_UID="$HOST_UID" --build-arg USER_GID="$HOST_GID" -t "$IMAGE_TAG" .
  fi

  IMAGE_NAME="$IMAGE_TAG"
}

ensure_image_exists

if [[ -z "$CLAUDE_ARGS" ]]; then
  echo "Hint: Try 'vibecode claude \"your question\"', 'vibecode yolo' or 'vibecode --help'"
  echo "Starting interactive shell..."
  CLAUDE_ARGS="bash"
fi
if [[ "$PERSISTENT" == true ]]; then
  if docker ps -a --filter "name=$SESSION_NAME" --format "{{.Names}}" | grep -q "^$SESSION_NAME$"; then
    echo "Using existing session: $SESSION_NAME"
    if [[ "$CLAUDE_ARGS" == "bash" ]]; then
      docker exec -it --user developer "$SESSION_NAME" bash
    else
      docker exec --user developer "$SESSION_NAME" $CLAUDE_ARGS
    fi
    exit 0
  else
    echo "Creating new persistent session: $SESSION_NAME"
    VOLUME_ARGS=""
    if [[ -n "$DOCKER_VOLUMES" ]]; then
      IFS='|' read -ra VOLUME_ARRAY <<< "$DOCKER_VOLUMES"
      VOLUME_ARGS="${VOLUME_ARRAY[*]}"
    fi
    docker run --privileged --label "vibecode-session" $VOLUME_ARGS \
      --workdir "$CURRENT_DIR" --name "$SESSION_NAME" -d "$IMAGE_NAME" >/dev/null

    echo "Waiting for container to be ready..."
    retries=30
    while [[ $retries -gt 0 ]]; do
      if docker exec "$SESSION_NAME" echo "ready" &>/dev/null; then
        echo "Container ready"
        break
      fi
      sleep 1
      ((retries--))
    done

    if [[ $retries -eq 0 ]]; then
      echo "Error: Container failed to become ready" >&2
      docker rm -f "$SESSION_NAME" &>/dev/null
      exit 1
    fi

    if [[ "$CLAUDE_ARGS" == "bash" ]]; then
      docker exec -it --user developer "$SESSION_NAME" bash
    else
      docker exec --user developer "$SESSION_NAME" $CLAUDE_ARGS
    fi
    exit 0
  fi
else
  TEMP_CONTAINER_NAME="vibecode-temp-$$"

  echo "Starting temporary container..."
  VOLUME_ARGS=""
  if [[ -n "$DOCKER_VOLUMES" ]]; then
    IFS='|' read -ra VOLUME_ARRAY <<< "$DOCKER_VOLUMES"
    VOLUME_ARGS="${VOLUME_ARRAY[*]}"
  fi
  docker run --privileged --label "vibecode-session" $VOLUME_ARGS \
    --workdir "$CURRENT_DIR" --name "$TEMP_CONTAINER_NAME" -d "$IMAGE_NAME" >/dev/null

  echo "Waiting for container to be ready..."
  retries=30
  while [[ $retries -gt 0 ]]; do
    if docker exec "$TEMP_CONTAINER_NAME" echo "ready" &>/dev/null; then
      break
    fi
    sleep 1
    ((retries--))
  done

  if [[ $retries -eq 0 ]]; then
    echo "Error: Container failed to become ready" >&2
    docker rm -f "$TEMP_CONTAINER_NAME" &>/dev/null
    exit 1
  fi

  echo "Executing: $CLAUDE_ARGS"
  if [[ "$CLAUDE_ARGS" == "bash" ]]; then
    docker exec -it --user developer "$TEMP_CONTAINER_NAME" bash
    exit_code=$?
  else
    docker exec --user developer "$TEMP_CONTAINER_NAME" $CLAUDE_ARGS
    exit_code=$?
  fi

  docker rm -f "$TEMP_CONTAINER_NAME" &>/dev/null
  exit $exit_code
fi
